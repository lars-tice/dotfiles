---
- name: Configure dotfiles environment
  hosts: localhost
  connection: local

  vars:
    force_config: false
    home_dir: "{{ ansible_env.HOME }}"
    dotfiles_dir: "{{ home_dir }}/dotfiles"
    cloudflared_ssh_hostname: "{{ lookup('env', 'CLOUDFLARED_SSH_HOSTNAME') | default('', true) }}"

  tasks:
    # ============================================================================
    # macOS: Homebrew Installation
    # ============================================================================
    - name: Install Homebrew (macOS)
      when: ansible_os_family == "Darwin"
      block:
        - name: Check if Homebrew is installed
          command: which brew
          register: brew_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install Homebrew
          shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          when: brew_check.rc != 0

        - name: Add Homebrew to PATH for Apple Silicon
          when: ansible_machine == "arm64" and brew_check.rc != 0
          lineinfile:
            path: "{{ home_dir }}/.zprofile"
            line: 'eval "$(/opt/homebrew/bin/brew shellenv)"'
            create: yes

    # ============================================================================
    # macOS: Core Tools
    # ============================================================================
    - name: Install core tools (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name:
          - git
          - gh
          - neovim
          - stow
        state: present

    # ============================================================================
    # macOS: Security Tools
    # ============================================================================
    - name: Install security tools (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name:
          - gnupg
          - git-crypt
        state: present

    # ============================================================================
    # macOS: Cloudflared Tunnel
    # ============================================================================
    - name: Install cloudflared (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name: cloudflare/cloudflare/cloudflared
        state: present

    # ============================================================================
    # macOS: Development Tools
    # ============================================================================
    - name: Install development tools (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name:
          - ripgrep
          - fd
          - fzf
          - lazygit
          - git-delta
          - uv
          - glow
        state: present

    - name: Install fzf shell integration (macOS)
      when: ansible_os_family == "Darwin"
      shell: $(brew --prefix)/opt/fzf/install --all --no-bash --no-fish --no-update-rc
      args:
        creates: "{{ home_dir }}/.fzf.zsh"

    # ============================================================================
    # macOS: Shell Enhancements
    # ============================================================================
    - name: Install shell enhancements (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name:
          - starship
          - bat
          - tmux
          - atuin
          - eza
          - zoxide
        state: present

    # ============================================================================
    # macOS: bat Tokyo Night Themes
    # ============================================================================
    - name: Install Tokyo Night themes for bat (macOS)
      when: ansible_os_family == "Darwin"
      block:
        - name: Check if Tokyo Night themes are installed
          stat:
            path: "$(brew --prefix)/etc/bat/themes/tokyonight.nvim"
          register: bat_themes_check

        - name: Create bat themes directory
          when: not bat_themes_check.stat.exists
          file:
            path: "$(brew --prefix)/etc/bat/themes"
            state: directory

        - name: Clone Tokyo Night themes
          when: not bat_themes_check.stat.exists
          git:
            repo: https://github.com/folke/tokyonight.nvim.git
            dest: "$(brew --prefix)/etc/bat/themes/tokyonight.nvim"
            depth: 1

        - name: Build bat cache
          when: not bat_themes_check.stat.exists
          command: bat cache --build

    # ============================================================================
    # macOS: Terminal and Window Manager
    # ============================================================================
    - name: Install Ghostty terminal (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew_cask:
        name: ghostty
        state: present

    - name: Install AeroSpace window manager (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew_cask:
        name: nikitabobko/tap/aerospace
        state: present

    # ============================================================================
    # macOS: Fonts
    # ============================================================================
    - name: Install JetBrains Mono Nerd Font (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew_cask:
        name: font-jetbrains-mono-nerd-font
        state: present

    # ============================================================================
    # macOS: Bitwarden Password Manager
    # ============================================================================
    - name: Install Bitwarden desktop app (macOS)
      when: ansible_os_family == "Darwin"
      community.general.homebrew_cask:
        name: bitwarden
        state: present

    # ============================================================================
    # macOS: nvm (Node Version Manager)
    # ============================================================================
    - name: Install nvm (macOS)
      when: ansible_os_family == "Darwin"
      block:
        - name: Check if nvm is installed
          stat:
            path: "{{ home_dir }}/.config/nvm/nvm.sh"
          register: nvm_check

        - name: Install nvm
          when: not nvm_check.stat.exists
          shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | NVM_DIR="{{ home_dir }}/.config/nvm" bash
          args:
            creates: "{{ home_dir }}/.config/nvm/nvm.sh"

    # ============================================================================
    # macOS: Rust/Cargo
    # ============================================================================
    - name: Install Rust via rustup (macOS)
      when: ansible_os_family == "Darwin"
      block:
        - name: Check if Rust is installed
          command: which rustc
          register: rust_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install Rust
          when: rust_check.rc != 0
          shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            creates: "{{ home_dir }}/.cargo/bin/rustc"

    # ============================================================================
    # Linux: Core Tools
    # ============================================================================
    - name: Update apt cache (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install core tools (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      apt:
        name:
          - git
          - stow
          - neovim
          - xclip  # Clipboard integration
        state: present

    # ============================================================================
    # Linux: Security Tools
    # ============================================================================
    - name: Install security tools (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      apt:
        name:
          - gnupg
          - git-crypt
        state: present

    # ============================================================================
    # Linux: Cloudflared Tunnel
    # ============================================================================
    - name: Install cloudflared (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if cloudflared is installed
          command: which cloudflared
          register: cloudflared_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Download cloudflared package
          when: cloudflared_check.rc != 0
          get_url:
            url: https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
            dest: /tmp/cloudflared-linux-amd64.deb

        - name: Install cloudflared package
          when: cloudflared_check.rc != 0
          become: yes
          apt:
            deb: /tmp/cloudflared-linux-amd64.deb

    # ============================================================================
    # Linux: Development Tools
    # ============================================================================
    - name: Install development tools (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      apt:
        name:
          - ripgrep
          - fd-find
          - fzf
          - bat
          - tmux
          - curl
          - wget
        state: present

    # ============================================================================
    # Linux: Ghostty Terminal
    # ============================================================================
    - name: Install Ghostty terminal (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if Ghostty is installed
          command: which ghostty
          register: ghostty_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Download Ghostty package
          when: ghostty_check.rc != 0
          get_url:
            url: https://github.com/mkasberg/ghostty-ubuntu/releases/download/1.1.3-0-ppa2/ghostty_1.1.3-0.ppa2_amd64_24.04.deb
            dest: /tmp/ghostty_1.1.3-0.ppa2_amd64_24.04.deb

        - name: Install Ghostty package
          when: ghostty_check.rc != 0
          become: yes
          apt:
            deb: /tmp/ghostty_1.1.3-0.ppa2_amd64_24.04.deb

        - name: Set Ghostty as default terminal
          become: yes
          alternatives:
            name: x-terminal-emulator
            path: /usr/bin/ghostty
            priority: 50

        - name: Set Ghostty as GNOME default terminal
          shell: gsettings set org.gnome.desktop.default-applications.terminal exec 'ghostty'
          changed_when: false

        - name: Create custom Ghostty desktop file
          copy:
            dest: "{{ home_dir }}/.local/share/applications/com.mitchellh.ghostty.desktop"
            content: |
              [Desktop Entry]
              Name=Ghostty
              Type=Application
              Comment=Fast, feature-rich, cross-platform terminal emulator
              Exec=/usr/bin/ghostty
              Icon=com.mitchellh.ghostty
              Categories=System;TerminalEmulator;
              Keywords=terminal;tty;pty;term;console;shell;ghostty;
              StartupNotify=true
              StartupWMClass=com.mitchellh.ghostty
              Terminal=false
              Actions=new-window;
              X-GNOME-UsesNotifications=true
              X-TerminalArgExec=-e
              X-TerminalArgTitle=--title=
              X-TerminalArgAppId=--class=
              X-TerminalArgDir=--working-directory=
              X-TerminalArgHold=--wait-after-command

              [Desktop Action new-window]
              Name=New Window
              Exec=/usr/bin/ghostty

        - name: Update desktop database
          command: update-desktop-database {{ home_dir }}/.local/share/applications/
          changed_when: false

    # ============================================================================
    # Linux: keyd Keyboard Remapping
    # ============================================================================
    - name: Install keyd keyboard remapping (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      block:
        - name: Install keyd
          apt:
            name: keyd
            state: present
          register: keyd_install
          failed_when: false

        - name: Add keyd PPA if native package unavailable
          when: keyd_install is failed
          apt_repository:
            repo: ppa:keyd-team/ppa
            state: present

        - name: Install keyd from PPA
          when: keyd_install is failed
          apt:
            name: keyd
            state: present
            update_cache: yes

        - name: Ensure keyd service is enabled and started
          systemd:
            name: keyd
            enabled: yes
            state: started

    # ============================================================================
    # Linux: Fonts
    # ============================================================================
    - name: Install JetBrains Mono Nerd Font (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Create fonts directory
          file:
            path: "{{ home_dir }}/.local/share/fonts"
            state: directory

        - name: Check if JetBrains Mono Nerd Font is installed
          stat:
            path: "{{ home_dir }}/.local/share/fonts/JetBrainsMonoNerdFontMono-Regular.ttf"
          register: font_check

        - name: Download JetBrains Mono Nerd Font
          when: not font_check.stat.exists
          unarchive:
            src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.zip
            dest: /tmp/
            remote_src: yes

        - name: Install font files
          when: not font_check.stat.exists
          shell: cp /tmp/*.ttf {{ home_dir }}/.local/share/fonts/
          args:
            creates: "{{ home_dir }}/.local/share/fonts/JetBrainsMonoNerdFontMono-Regular.ttf"

        - name: Refresh font cache
          when: not font_check.stat.exists
          command: fc-cache -fv
          changed_when: false

    # ============================================================================
    # Linux: Starship Prompt
    # ============================================================================
    - name: Install Starship prompt (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if Starship is installed
          command: which starship
          register: starship_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install Starship
          when: starship_check.rc != 0
          shell: curl -sS https://starship.rs/install.sh | sh -s -- --yes
          args:
            creates: "{{ home_dir }}/.local/bin/starship"

    # ============================================================================
    # Linux: Atuin Shell History
    # ============================================================================
    - name: Install Atuin shell history (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if Atuin is installed
          command: which atuin
          register: atuin_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install Atuin
          when: atuin_check.rc != 0
          shell: curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh -s -- --yes
          args:
            creates: "{{ home_dir }}/.cargo/bin/atuin"

    # ============================================================================
    # Linux: eza (Better ls)
    # ============================================================================
    - name: Install eza (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if eza is installed
          command: which eza
          register: eza_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Ensure GPG keyrings directory exists
          when: eza_check.rc != 0
          become: yes
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add eza repository GPG key
          when: eza_check.rc != 0
          become: yes
          shell: |
            wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
            chmod 644 /etc/apt/keyrings/gierens.gpg
          args:
            creates: /etc/apt/keyrings/gierens.gpg

        - name: Add eza repository
          when: eza_check.rc != 0
          become: yes
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main"
            filename: gierens
            state: present

        - name: Install eza
          when: eza_check.rc != 0
          become: yes
          apt:
            name: eza
            update_cache: yes
            state: present

    # ============================================================================
    # Linux: zoxide (Smarter cd)
    # ============================================================================
    - name: Install zoxide (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if zoxide is installed
          command: which zoxide
          register: zoxide_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install zoxide
          when: zoxide_check.rc != 0
          shell: curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
          args:
            creates: "{{ home_dir }}/.local/bin/zoxide"

    # ============================================================================
    # Linux: bat Tokyo Night Themes
    # ============================================================================
    - name: Install Tokyo Night themes for bat (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Get bat config directory
          shell: batcat --config-dir
          register: bat_config_dir
          changed_when: false
          check_mode: no

        - name: Check if Tokyo Night themes are installed
          stat:
            path: "{{ bat_config_dir.stdout }}/themes/tokyonight.nvim"
          register: bat_themes_check

        - name: Create bat themes directory
          when: not bat_themes_check.stat.exists
          file:
            path: "{{ bat_config_dir.stdout }}/themes"
            state: directory

        - name: Clone Tokyo Night themes
          when: not bat_themes_check.stat.exists
          git:
            repo: https://github.com/folke/tokyonight.nvim.git
            dest: "{{ bat_config_dir.stdout }}/themes/tokyonight.nvim"
            depth: 1

        - name: Build bat cache
          when: not bat_themes_check.stat.exists
          command: batcat cache --build

    # ============================================================================
    # Linux: Git Credential Manager
    # ============================================================================
    - name: Install Git Credential Manager (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if GCM is installed
          command: which git-credential-manager
          register: gcm_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Download GCM package
          when: gcm_check.rc != 0
          get_url:
            url: https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.6.0/gcm-linux_amd64.2.6.0.deb
            dest: /tmp/gcm-linux_amd64.2.6.0.deb

        - name: Install GCM package
          when: gcm_check.rc != 0
          become: yes
          apt:
            deb: /tmp/gcm-linux_amd64.2.6.0.deb

    # ============================================================================
    # Linux: Bitwarden Password Manager
    # ============================================================================
    - name: Install Bitwarden desktop app (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if Bitwarden is installed
          command: which bitwarden
          register: bitwarden_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Download Bitwarden .deb package
          when: bitwarden_check.rc != 0
          shell: wget -O /tmp/bitwarden-amd64.deb "https://vault.bitwarden.com/download/?app=desktop&platform=linux&variant=deb"
          args:
            creates: /tmp/bitwarden-amd64.deb
          check_mode: no

        - name: Install Bitwarden package
          when: bitwarden_check.rc != 0
          become: yes
          apt:
            deb: /tmp/bitwarden-amd64.deb

    # ============================================================================
    # Linux: nvm (Node Version Manager)
    # ============================================================================
    - name: Install nvm (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if nvm is installed
          stat:
            path: "{{ home_dir }}/.config/nvm/nvm.sh"
          register: nvm_check

        - name: Install nvm
          when: not nvm_check.stat.exists
          shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | NVM_DIR="{{ home_dir }}/.config/nvm" bash
          args:
            creates: "{{ home_dir }}/.config/nvm/nvm.sh"

    # ============================================================================
    # Linux: Rust/Cargo
    # ============================================================================
    - name: Install Rust via rustup (Linux)
      when: ansible_os_family == "Debian"
      block:
        - name: Check if Rust is installed
          command: which rustc
          register: rust_check
          failed_when: false
          changed_when: false
          check_mode: no

        - name: Install Rust
          when: rust_check.rc != 0
          shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            creates: "{{ home_dir }}/.cargo/bin/rustc"

    # ============================================================================
    # Cross-platform: Cloudflared SSH Configuration
    # ============================================================================
    - name: Configure cloudflared SSH access
      block:
        - name: Ensure SSH config directory exists
          file:
            path: "{{ home_dir }}/.ssh"
            state: directory
            mode: '0700'

        - name: Check if cloudflared SSH config already exists
          when: cloudflared_ssh_hostname | length > 0
          shell: grep -q "{{ cloudflared_ssh_hostname }}" {{ home_dir }}/.ssh/config
          register: cloudflared_ssh_config_check
          failed_when: false
          changed_when: false

        - name: Add cloudflared SSH configuration
          when: cloudflared_ssh_hostname | length > 0 and (cloudflared_ssh_config_check.skipped is not defined and cloudflared_ssh_config_check.rc != 0)
          shell: |
            echo "" >> {{ home_dir }}/.ssh/config
            echo "# Cloudflared SSH access (added by Ansible)" >> {{ home_dir }}/.ssh/config
            cloudflared access ssh-config --hostname {{ cloudflared_ssh_hostname }} | grep -v "^Add to your" | grep -v "^$" >> {{ home_dir }}/.ssh/config

    # ============================================================================
    # Cross-platform: Stow Dotfiles
    # ============================================================================
    - name: Backup existing dotfiles (force mode)
      when: force_config | bool
      block:
        - name: Get timestamp for backups
          set_fact:
            backup_timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"

        - name: Backup existing configs
          shell: |
            for config in .zshrc .bashrc .gitconfig .fzf.zsh .profile; do
              if [ -f {{ home_dir }}/$config ] && [ ! -L {{ home_dir }}/$config ]; then
                cp {{ home_dir }}/$config {{ home_dir }}/$config.backup.{{ backup_timestamp }}
                rm {{ home_dir }}/$config
                echo "Backed up $config"
              fi
            done
          register: backup_result
          changed_when: "'Backed up' in backup_result.stdout"

    - name: Stow dotfiles packages
      shell: |
        cd {{ dotfiles_dir }}
        for package in bash zsh git nvim starship tmux ghostty; do
          if [ -d "$package" ]; then
            {% if force_config | bool %}
            stow --restow "$package" 2>&1 || echo "Warning: Issues with $package"
            {% else %}
            stow --adopt "$package" 2>&1 || true
            stow --restow "$package" 2>&1 || echo "Warning: Issues with $package"
            {% endif %}
            echo "Stowed $package"
          fi
        done
      register: stow_result
      changed_when: "'Stowed' in stow_result.stdout"

    - name: Stow platform-specific packages (macOS)
      when: ansible_os_family == "Darwin"
      shell: |
        cd {{ dotfiles_dir }}
        for package in @macos aerospace karabiner; do
          if [ -d "$package" ]; then
            {% if force_config | bool %}
            stow --restow "$package" 2>&1 || echo "Warning: Issues with $package"
            {% else %}
            stow --adopt "$package" 2>&1 || true
            stow --restow "$package" 2>&1 || echo "Warning: Issues with $package"
            {% endif %}
            echo "Stowed $package"
          fi
        done
      register: stow_macos_result
      changed_when: "'Stowed' in stow_macos_result.stdout"

    - name: Clean up old backup files
      when: force_config | bool and stow_result is succeeded
      shell: |
        find {{ home_dir }} -maxdepth 1 -type f -name "*.backup.*" -not -name "*.backup.{{ backup_timestamp }}" -delete
      register: cleanup_result
      changed_when: cleanup_result.rc == 0

    - name: Configure keyd (Linux)
      when: ansible_os_family == "Debian"
      become: yes
      block:
        - name: Check if keyd config exists in dotfiles
          stat:
            path: "{{ dotfiles_dir }}/keyd/.config/keyd/default.conf"
          register: keyd_config_check

        - name: Copy keyd configuration
          when: keyd_config_check.stat.exists
          copy:
            src: "{{ dotfiles_dir }}/keyd/.config/keyd/default.conf"
            dest: /etc/keyd/default.conf
            owner: root
            group: root
            mode: '0644'
          notify: Restart keyd

  handlers:
    - name: Restart keyd
      become: yes
      systemd:
        name: keyd
        state: restarted
