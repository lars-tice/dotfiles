# Tmux Configuration

# Fix for SSH + tmux shell initialization 
# Start normal interactive shells instead of login shells
# This ensures .bashrc is read and all aliases/functions work
set-option -g default-command $SHELL

# Set prefix to Ctrl+Space (easier than Ctrl+B)
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# Enable mouse support
# NOTE: Mouse mode intercepts scroll events. To view terminal scrollback:
#   - Use Ctrl+Space [ to enter copy mode, then scroll with mouse or vim keys
#   - Or open a non-tmux terminal window (Ctrl+Shift+N in ghostty)
#   - Use Ctrl+Space d to DETACH (not exit) to keep session alive
set -g mouse on

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when one is closed
set -g renumber-windows on

# Set terminal colors
set -g default-terminal "screen-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

# Faster key repetition
set -s escape-time 0

# Increase scrollback buffer
set -g history-limit 50000

# Display messages for 4 seconds
set -g display-time 4000

# Refresh status more often
set -g status-interval 5

# Focus events for vim
set -g focus-events on

# Useful for multi-monitor setups
setw -g aggressive-resize on

# --- KEY BINDINGS ---

# Easy config reload
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Split panes using \ (vertical) and - (horizontal)
bind '\' split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
# Also keep | for vertical if you want it
bind | split-window -h -c "#{pane_current_path}"
unbind '"'
unbind %

# Navigate panes with vim-like keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Kill pane/window without confirmation
bind x kill-pane
bind X kill-window

# Resize panes with vim-like keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Quick window switching
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Create new window with current path
bind c new-window -c "#{pane_current_path}"

# --- VISUAL STYLING (Tokyo Night inspired) ---

# Status bar
set -g status-position bottom
set -g status-style 'bg=#1a1b26 fg=#a9b1d6'
set -g status-left '#[fg=#7aa2f7,bold] ‚ùê #S '
set -g status-right '#[fg=#7aa2f7] %Y-%m-%d %H:%M '
set -g status-left-length 30
set -g status-right-length 50

# Window status
setw -g window-status-current-style 'fg=#7aa2f7 bg=#3b4261 bold'
setw -g window-status-current-format ' #I:#W#F '
setw -g window-status-style 'fg=#a9b1d6'
setw -g window-status-format ' #I:#W#F '

# Pane borders
set -g pane-border-style 'fg=#3b4261'
set -g pane-active-border-style 'fg=#7aa2f7'

# Message style
set -g message-style 'fg=#7aa2f7 bg=#1a1b26 bold'

# Copy mode vim bindings
setw -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# Cross-platform clipboard integration
# macOS clipboard integration
if-shell "uname | grep -q Darwin" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
}

# Linux clipboard integration  
if-shell "uname | grep -q Linux" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
}